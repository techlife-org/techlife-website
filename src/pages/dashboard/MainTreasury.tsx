import React, { useState, useEffect, useCallback } from 'react';\nimport { AlertCircle, Wifi, WifiOff } from 'lucide-react';\nimport { startOfMonth, endOfMonth } from 'date-fns';\n\n// Components\nimport BudgetOverviewCard from './components/BudgetOverviewCard';\nimport PaymentStatsCard from './components/PaymentStatsCard';\nimport QuickActionsPanel from './components/QuickActionsPanel';\nimport FinancialCharts from './components/FinancialCharts';\nimport Filters from './components/Filters';\n\n// Services and Types\nimport { dashboardService } from '@/services/dashboardService';\nimport { DashboardData, BudgetSummary, PaymentStatistics, DateRange } from '@/types/dashboard';\n\n// Export utilities\nimport * as XLSX from 'xlsx';\n\nconst MainTreasury: React.FC = () => {\n  // State management\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [budgetSummary, setBudgetSummary] = useState<BudgetSummary | null>(null);\n  const [paymentStats, setPaymentStats] = useState<PaymentStatistics | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n  \n  // Date range state (default to current month)\n  const [dateRange, setDateRange] = useState<DateRange>({\n    start: startOfMonth(new Date()),\n    end: endOfMonth(new Date())\n  });\n\n  // Load dashboard data\n  const loadDashboardData = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const [dashData, budgetData, paymentData] = await Promise.all([\n        dashboardService.getDashboardData(dateRange),\n        dashboardService.getBudgetSummary(),\n        dashboardService.getPaymentStatistics()\n      ]);\n\n      setDashboardData(dashData);\n      setBudgetSummary(budgetData);\n      setPaymentStats(paymentData);\n      setLastUpdated(new Date());\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load dashboard data');\n      console.error('Dashboard data loading error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [dateRange]);\n\n  // Initial data load\n  useEffect(() => {\n    loadDashboardData();\n  }, [loadDashboardData]);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isOnline && !isLoading) {\n        loadDashboardData();\n      }\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [loadDashboardData, isOnline, isLoading]);\n\n  // Online/offline detection\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Export functions\n  const handleExportPDF = async () => {\n    try {\n      // For now, we'll show an alert. In a real implementation, you'd use react-pdf\n      alert('PDF export functionality would be implemented here using react-pdf library');\n      console.log('Exporting PDF with data:', { dashboardData, budgetSummary, paymentStats });\n    } catch (error) {\n      console.error('PDF export error:', error);\n      alert('Failed to export PDF');\n    }\n  };\n\n  const handleExportExcel = () => {\n    try {\n      if (!dashboardData || !budgetSummary || !paymentStats) {\n        alert('No data available to export');\n        return;\n      }\n\n      // Create workbook\n      const wb = XLSX.utils.book_new();\n\n      // Dashboard Summary Sheet\n      const summaryData = [\n        ['Treasury Dashboard Summary', ''],\n        ['Generated on:', new Date().toLocaleString()],\n        ['Date Range:', `${dateRange.start.toLocaleDateString()} - ${dateRange.end.toLocaleDateString()}`],\n        ['', ''],\n        ['Budget Overview', ''],\n        ['Total Budget', budgetSummary.total],\n        ['Utilized', budgetSummary.utilized],\n        ['Remaining', budgetSummary.remaining],\n        ['', ''],\n        ['Payment Statistics', ''],\n        ['Total Processed', paymentStats.totalProcessed],\n        ['Pending', paymentStats.pending],\n        ['Avg Processing Time (hours)', paymentStats.avgProcessingTime],\n        ['Success Rate (%)', paymentStats.successRate]\n      ];\n      const summaryWS = XLSX.utils.aoa_to_sheet(summaryData);\n      XLSX.utils.book_append_sheet(wb, summaryWS, 'Summary');\n\n      // Monthly Trends Sheet\n      const trendsWS = XLSX.utils.json_to_sheet(dashboardData.monthlyTrends);\n      XLSX.utils.book_append_sheet(wb, trendsWS, 'Monthly Trends');\n\n      // Save file\n      XLSX.writeFile(wb, `treasury-dashboard-${new Date().toISOString().split('T')[0]}.xlsx`);\n    } catch (error) {\n      console.error('Excel export error:', error);\n      alert('Failed to export Excel file');\n    }\n  };\n\n  // Quick action handlers\n  const handleNewApprovalRequest = () => {\n    // Navigate to approval request form\n    console.log('Navigate to new approval request');\n    alert('Navigate to New Approval Request form');\n  };\n\n  const handlePendingApprovals = () => {\n    // Navigate to pending approvals list\n    console.log('Navigate to pending approvals');\n    alert('Navigate to Pending Approvals list');\n  };\n\n  const handleGenerateReports = () => {\n    // Navigate to reports section\n    console.log('Navigate to reports');\n    alert('Navigate to Reports section');\n  };\n\n  const handleProcessBatchPayments = () => {\n    // Navigate to batch payment processing\n    console.log('Navigate to batch payments');\n    alert('Navigate to Batch Payment Processing');\n  };\n\n  // Error state\n  if (error && !dashboardData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <div className=\"bg-white rounded-lg shadow-md p-8 max-w-md w-full text-center\">\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">Error Loading Dashboard</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={loadDashboardData}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Treasury Dashboard</h1>\n              <p className=\"text-sm text-gray-500\">Financial overview and quick actions</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {/* Connection Status */}\n              <div className={`flex items-center text-sm ${\n                isOnline ? 'text-green-600' : 'text-red-600'\n              }`}>\n                {isOnline ? (\n                  <Wifi className=\"h-4 w-4 mr-1\" />\n                ) : (\n                  <WifiOff className=\"h-4 w-4 mr-1\" />\n                )}\n                <span>{isOnline ? 'Online' : 'Offline'}</span>\n              </div>\n              \n              {/* Last Updated */}\n              <div className=\"text-sm text-gray-500\">\n                Updated: {lastUpdated.toLocaleTimeString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Filters */}\n        <Filters\n          dateRange={dateRange}\n          onDateRangeChange={setDateRange}\n          onRefresh={loadDashboardData}\n          onExportPDF={handleExportPDF}\n          onExportExcel={handleExportExcel}\n          isLoading={isLoading}\n        />\n\n        {/* Error Banner */}\n        {error && (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"h-5 w-5 text-yellow-600 mr-2\" />\n              <span className=\"text-sm text-yellow-800\">\n                {error} - Showing cached data\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          {/* Budget Overview */}\n          <div className=\"lg:col-span-1\">\n            <BudgetOverviewCard \n              budgetSummary={budgetSummary || { total: 0, utilized: 0, remaining: 0 }}\n              isLoading={isLoading}\n            />\n          </div>\n\n          {/* Payment Statistics */}\n          <div className=\"lg:col-span-1\">\n            <PaymentStatsCard \n              paymentStats={paymentStats || { totalProcessed: 0, pending: 0, avgProcessingTime: 0, successRate: 0 }}\n              isLoading={isLoading}\n            />\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"lg:col-span-1\">\n            <QuickActionsPanel\n              onNewApprovalRequest={handleNewApprovalRequest}\n              onPendingApprovals={handlePendingApprovals}\n              onGenerateReports={handleGenerateReports}\n              onProcessBatchPayments={handleProcessBatchPayments}\n              isLoading={isLoading}\n            />\n          </div>\n        </div>\n\n        {/* Financial Charts */}\n        <FinancialCharts\n          monthlyTrends={dashboardData?.monthlyTrends || []}\n          isLoading={isLoading}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MainTreasury;